// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: meshtastic/telemetry.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///
/// Supported I2C Sensors for telemetry in Meshtastic
public enum TelemetrySensorType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///
  /// No external telemetry sensor explicitly set
  case sensorUnset // = 0

  ///
  /// High accuracy temperature, pressure, humidity
  case bme280 // = 1

  ///
  /// High accuracy temperature, pressure, humidity, and air resistance
  case bme680 // = 2

  ///
  /// Very high accuracy temperature
  case mcp9808 // = 3

  ///
  /// Moderate accuracy current and voltage
  case ina260 // = 4

  ///
  /// Moderate accuracy current and voltage
  case ina219 // = 5

  ///
  /// High accuracy temperature and pressure
  case bmp280 // = 6

  ///
  /// High accuracy temperature and humidity
  case shtc3 // = 7

  ///
  /// High accuracy pressure
  case lps22 // = 8

  ///
  /// 3-Axis magnetic sensor
  case qmc6310 // = 9

  ///
  /// 6-Axis inertial measurement sensor
  case qmi8658 // = 10

  ///
  /// 3-Axis magnetic sensor
  case qmc5883L // = 11

  ///
  /// High accuracy temperature and humidity
  case sht31 // = 12

  ///
  /// PM2.5 air quality sensor
  case pmsa003I // = 13

  ///
  /// INA3221 3 Channel Voltage / Current Sensor
  case ina3221 // = 14

  ///
  /// BMP085/BMP180 High accuracy temperature and pressure (older Version of BMP280)
  case bmp085 // = 15

  ///
  /// RCWL-9620 Doppler Radar Distance Sensor, used for water level detection
  case rcwl9620 // = 16

  ///
  /// Sensirion High accuracy temperature and humidity
  case sht4X // = 17

  ///
  /// VEML7700 high accuracy ambient light(Lux) digital 16-bit resolution sensor.
  case veml7700 // = 18

  ///
  /// MLX90632 non-contact IR temperature sensor.
  case mlx90632 // = 19

  ///
  /// TI OPT3001 Ambient Light Sensor
  case opt3001 // = 20

  ///
  /// Lite On LTR-390UV-01 UV Light Sensor
  case ltr390Uv // = 21

  ///
  /// AMS TSL25911FN RGB Light Sensor
  case tsl25911Fn // = 22

  ///
  /// AHT10 Integrated temperature and humidity sensor
  case aht10 // = 23

  ///
  /// DFRobot Lark Weather station (temperature, humidity, pressure, wind speed and direction) 
  case dfrobotLark // = 24

  ///
  /// NAU7802 Scale Chip or compatible
  case nau7802 // = 25
  case UNRECOGNIZED(Int)

  public init() {
    self = .sensorUnset
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .sensorUnset
    case 1: self = .bme280
    case 2: self = .bme680
    case 3: self = .mcp9808
    case 4: self = .ina260
    case 5: self = .ina219
    case 6: self = .bmp280
    case 7: self = .shtc3
    case 8: self = .lps22
    case 9: self = .qmc6310
    case 10: self = .qmi8658
    case 11: self = .qmc5883L
    case 12: self = .sht31
    case 13: self = .pmsa003I
    case 14: self = .ina3221
    case 15: self = .bmp085
    case 16: self = .rcwl9620
    case 17: self = .sht4X
    case 18: self = .veml7700
    case 19: self = .mlx90632
    case 20: self = .opt3001
    case 21: self = .ltr390Uv
    case 22: self = .tsl25911Fn
    case 23: self = .aht10
    case 24: self = .dfrobotLark
    case 25: self = .nau7802
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .sensorUnset: return 0
    case .bme280: return 1
    case .bme680: return 2
    case .mcp9808: return 3
    case .ina260: return 4
    case .ina219: return 5
    case .bmp280: return 6
    case .shtc3: return 7
    case .lps22: return 8
    case .qmc6310: return 9
    case .qmi8658: return 10
    case .qmc5883L: return 11
    case .sht31: return 12
    case .pmsa003I: return 13
    case .ina3221: return 14
    case .bmp085: return 15
    case .rcwl9620: return 16
    case .sht4X: return 17
    case .veml7700: return 18
    case .mlx90632: return 19
    case .opt3001: return 20
    case .ltr390Uv: return 21
    case .tsl25911Fn: return 22
    case .aht10: return 23
    case .dfrobotLark: return 24
    case .nau7802: return 25
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [TelemetrySensorType] = [
    .sensorUnset,
    .bme280,
    .bme680,
    .mcp9808,
    .ina260,
    .ina219,
    .bmp280,
    .shtc3,
    .lps22,
    .qmc6310,
    .qmi8658,
    .qmc5883L,
    .sht31,
    .pmsa003I,
    .ina3221,
    .bmp085,
    .rcwl9620,
    .sht4X,
    .veml7700,
    .mlx90632,
    .opt3001,
    .ltr390Uv,
    .tsl25911Fn,
    .aht10,
    .dfrobotLark,
    .nau7802,
  ]

}

///
/// Key native device metrics such as battery level
public struct DeviceMetrics: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///
  /// 0-100 (>100 means powered)
  public var batteryLevel: UInt32 = 0

  ///
  /// Voltage measured
  public var voltage: Float = 0

  ///
  /// Utilization for the current channel, including well formed TX, RX and malformed RX (aka noise).
  public var channelUtilization: Float = 0

  ///
  /// Percent of airtime for transmission used within the last hour.
  public var airUtilTx: Float = 0

  ///
  /// How long the device has been running since the last reboot (in seconds)
  public var uptimeSeconds: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///
/// Weather station or other environmental metrics
public struct EnvironmentMetrics: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///
  /// Temperature measured
  public var temperature: Float {
    get {return _storage._temperature}
    set {_uniqueStorage()._temperature = newValue}
  }

  ///
  /// Relative humidity percent measured
  public var relativeHumidity: Float {
    get {return _storage._relativeHumidity}
    set {_uniqueStorage()._relativeHumidity = newValue}
  }

  ///
  /// Barometric pressure in hPA measured
  public var barometricPressure: Float {
    get {return _storage._barometricPressure}
    set {_uniqueStorage()._barometricPressure = newValue}
  }

  ///
  /// Gas resistance in MOhm measured
  public var gasResistance: Float {
    get {return _storage._gasResistance}
    set {_uniqueStorage()._gasResistance = newValue}
  }

  ///
  /// Voltage measured (To be depreciated in favor of PowerMetrics in Meshtastic 3.x)
  public var voltage: Float {
    get {return _storage._voltage}
    set {_uniqueStorage()._voltage = newValue}
  }

  ///
  /// Current measured (To be depreciated in favor of PowerMetrics in Meshtastic 3.x)
  public var current: Float {
    get {return _storage._current}
    set {_uniqueStorage()._current = newValue}
  }

  /// 
  /// relative scale IAQ value as measured by Bosch BME680 . value 0-500.
  /// Belongs to Air Quality but is not particle but VOC measurement. Other VOC values can also be put in here.
  public var iaq: UInt32 {
    get {return _storage._iaq}
    set {_uniqueStorage()._iaq = newValue}
  }

  ///
  /// RCWL9620 Doppler Radar Distance Sensor, used for water level detection. Float value in mm.
  public var distance: Float {
    get {return _storage._distance}
    set {_uniqueStorage()._distance = newValue}
  }

  ///
  /// VEML7700 high accuracy ambient light(Lux) digital 16-bit resolution sensor.
  public var lux: Float {
    get {return _storage._lux}
    set {_uniqueStorage()._lux = newValue}
  }

  ///
  /// VEML7700 high accuracy white light(irradiance) not calibrated digital 16-bit resolution sensor.
  public var whiteLux: Float {
    get {return _storage._whiteLux}
    set {_uniqueStorage()._whiteLux = newValue}
  }

  ///
  /// Infrared lux
  public var irLux: Float {
    get {return _storage._irLux}
    set {_uniqueStorage()._irLux = newValue}
  }

  ///
  /// Ultraviolet lux
  public var uvLux: Float {
    get {return _storage._uvLux}
    set {_uniqueStorage()._uvLux = newValue}
  }

  ///
  /// Wind direction in degrees
  /// 0 degrees = North, 90 = East, etc...
  public var windDirection: UInt32 {
    get {return _storage._windDirection}
    set {_uniqueStorage()._windDirection = newValue}
  }

  ///
  /// Wind speed in m/s
  public var windSpeed: Float {
    get {return _storage._windSpeed}
    set {_uniqueStorage()._windSpeed = newValue}
  }

  ///
  /// Weight in KG
  public var weight: Float {
    get {return _storage._weight}
    set {_uniqueStorage()._weight = newValue}
  }

  ///
  /// Wind gust in m/s
  public var windGust: Float {
    get {return _storage._windGust}
    set {_uniqueStorage()._windGust = newValue}
  }

  ///
  /// Wind lull in m/s
  public var windLull: Float {
    get {return _storage._windLull}
    set {_uniqueStorage()._windLull = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///
/// Power Metrics (voltage / current / etc)
public struct PowerMetrics: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///
  /// Voltage (Ch1)
  public var ch1Voltage: Float = 0

  ///
  /// Current (Ch1)
  public var ch1Current: Float = 0

  ///
  /// Voltage (Ch2)
  public var ch2Voltage: Float = 0

  ///
  /// Current (Ch2)
  public var ch2Current: Float = 0

  ///
  /// Voltage (Ch3)
  public var ch3Voltage: Float = 0

  ///
  /// Current (Ch3)
  public var ch3Current: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///
/// Air quality metrics
public struct AirQualityMetrics: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///
  /// Concentration Units Standard PM1.0
  public var pm10Standard: UInt32 = 0

  ///
  /// Concentration Units Standard PM2.5
  public var pm25Standard: UInt32 = 0

  ///
  /// Concentration Units Standard PM10.0
  public var pm100Standard: UInt32 = 0

  ///
  /// Concentration Units Environmental PM1.0
  public var pm10Environmental: UInt32 = 0

  ///
  /// Concentration Units Environmental PM2.5
  public var pm25Environmental: UInt32 = 0

  ///
  /// Concentration Units Environmental PM10.0
  public var pm100Environmental: UInt32 = 0

  ///
  /// 0.3um Particle Count
  public var particles03Um: UInt32 = 0

  ///
  /// 0.5um Particle Count
  public var particles05Um: UInt32 = 0

  ///
  /// 1.0um Particle Count
  public var particles10Um: UInt32 = 0

  ///
  /// 2.5um Particle Count
  public var particles25Um: UInt32 = 0

  ///
  /// 5.0um Particle Count
  public var particles50Um: UInt32 = 0

  ///
  /// 10.0um Particle Count
  public var particles100Um: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///
/// Types of Measurements the telemetry module is equipped to handle
public struct Telemetry: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///
  /// Seconds since 1970 - or 0 for unknown/unset
  public var time: UInt32 = 0

  public var variant: Telemetry.OneOf_Variant? = nil

  ///
  /// Key native device metrics such as battery level
  public var deviceMetrics: DeviceMetrics {
    get {
      if case .deviceMetrics(let v)? = variant {return v}
      return DeviceMetrics()
    }
    set {variant = .deviceMetrics(newValue)}
  }

  ///
  /// Weather station or other environmental metrics
  public var environmentMetrics: EnvironmentMetrics {
    get {
      if case .environmentMetrics(let v)? = variant {return v}
      return EnvironmentMetrics()
    }
    set {variant = .environmentMetrics(newValue)}
  }

  ///
  /// Air quality metrics
  public var airQualityMetrics: AirQualityMetrics {
    get {
      if case .airQualityMetrics(let v)? = variant {return v}
      return AirQualityMetrics()
    }
    set {variant = .airQualityMetrics(newValue)}
  }

  ///
  /// Power Metrics
  public var powerMetrics: PowerMetrics {
    get {
      if case .powerMetrics(let v)? = variant {return v}
      return PowerMetrics()
    }
    set {variant = .powerMetrics(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Variant: Equatable, Sendable {
    ///
    /// Key native device metrics such as battery level
    case deviceMetrics(DeviceMetrics)
    ///
    /// Weather station or other environmental metrics
    case environmentMetrics(EnvironmentMetrics)
    ///
    /// Air quality metrics
    case airQualityMetrics(AirQualityMetrics)
    ///
    /// Power Metrics
    case powerMetrics(PowerMetrics)

  }

  public init() {}
}

///
/// NAU7802 Telemetry configuration, for saving to flash
public struct Nau7802Config: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///
  /// The offset setting for the NAU7802
  public var zeroOffset: Int32 = 0

  ///
  /// The calibration factor for the NAU7802
  public var calibrationFactor: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "meshtastic"

extension TelemetrySensorType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SENSOR_UNSET"),
    1: .same(proto: "BME280"),
    2: .same(proto: "BME680"),
    3: .same(proto: "MCP9808"),
    4: .same(proto: "INA260"),
    5: .same(proto: "INA219"),
    6: .same(proto: "BMP280"),
    7: .same(proto: "SHTC3"),
    8: .same(proto: "LPS22"),
    9: .same(proto: "QMC6310"),
    10: .same(proto: "QMI8658"),
    11: .same(proto: "QMC5883L"),
    12: .same(proto: "SHT31"),
    13: .same(proto: "PMSA003I"),
    14: .same(proto: "INA3221"),
    15: .same(proto: "BMP085"),
    16: .same(proto: "RCWL9620"),
    17: .same(proto: "SHT4X"),
    18: .same(proto: "VEML7700"),
    19: .same(proto: "MLX90632"),
    20: .same(proto: "OPT3001"),
    21: .same(proto: "LTR390UV"),
    22: .same(proto: "TSL25911FN"),
    23: .same(proto: "AHT10"),
    24: .same(proto: "DFROBOT_LARK"),
    25: .same(proto: "NAU7802"),
  ]
}

extension DeviceMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeviceMetrics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "battery_level"),
    2: .same(proto: "voltage"),
    3: .standard(proto: "channel_utilization"),
    4: .standard(proto: "air_util_tx"),
    5: .standard(proto: "uptime_seconds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.batteryLevel) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.voltage) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.channelUtilization) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.airUtilTx) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.uptimeSeconds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.batteryLevel != 0 {
      try visitor.visitSingularUInt32Field(value: self.batteryLevel, fieldNumber: 1)
    }
    if self.voltage.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.voltage, fieldNumber: 2)
    }
    if self.channelUtilization.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.channelUtilization, fieldNumber: 3)
    }
    if self.airUtilTx.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.airUtilTx, fieldNumber: 4)
    }
    if self.uptimeSeconds != 0 {
      try visitor.visitSingularUInt32Field(value: self.uptimeSeconds, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DeviceMetrics, rhs: DeviceMetrics) -> Bool {
    if lhs.batteryLevel != rhs.batteryLevel {return false}
    if lhs.voltage != rhs.voltage {return false}
    if lhs.channelUtilization != rhs.channelUtilization {return false}
    if lhs.airUtilTx != rhs.airUtilTx {return false}
    if lhs.uptimeSeconds != rhs.uptimeSeconds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EnvironmentMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnvironmentMetrics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "temperature"),
    2: .standard(proto: "relative_humidity"),
    3: .standard(proto: "barometric_pressure"),
    4: .standard(proto: "gas_resistance"),
    5: .same(proto: "voltage"),
    6: .same(proto: "current"),
    7: .same(proto: "iaq"),
    8: .same(proto: "distance"),
    9: .same(proto: "lux"),
    10: .standard(proto: "white_lux"),
    11: .standard(proto: "ir_lux"),
    12: .standard(proto: "uv_lux"),
    13: .standard(proto: "wind_direction"),
    14: .standard(proto: "wind_speed"),
    15: .same(proto: "weight"),
    16: .standard(proto: "wind_gust"),
    17: .standard(proto: "wind_lull"),
  ]

  fileprivate class _StorageClass {
    var _temperature: Float = 0
    var _relativeHumidity: Float = 0
    var _barometricPressure: Float = 0
    var _gasResistance: Float = 0
    var _voltage: Float = 0
    var _current: Float = 0
    var _iaq: UInt32 = 0
    var _distance: Float = 0
    var _lux: Float = 0
    var _whiteLux: Float = 0
    var _irLux: Float = 0
    var _uvLux: Float = 0
    var _windDirection: UInt32 = 0
    var _windSpeed: Float = 0
    var _weight: Float = 0
    var _windGust: Float = 0
    var _windLull: Float = 0

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _temperature = source._temperature
      _relativeHumidity = source._relativeHumidity
      _barometricPressure = source._barometricPressure
      _gasResistance = source._gasResistance
      _voltage = source._voltage
      _current = source._current
      _iaq = source._iaq
      _distance = source._distance
      _lux = source._lux
      _whiteLux = source._whiteLux
      _irLux = source._irLux
      _uvLux = source._uvLux
      _windDirection = source._windDirection
      _windSpeed = source._windSpeed
      _weight = source._weight
      _windGust = source._windGust
      _windLull = source._windLull
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularFloatField(value: &_storage._temperature) }()
        case 2: try { try decoder.decodeSingularFloatField(value: &_storage._relativeHumidity) }()
        case 3: try { try decoder.decodeSingularFloatField(value: &_storage._barometricPressure) }()
        case 4: try { try decoder.decodeSingularFloatField(value: &_storage._gasResistance) }()
        case 5: try { try decoder.decodeSingularFloatField(value: &_storage._voltage) }()
        case 6: try { try decoder.decodeSingularFloatField(value: &_storage._current) }()
        case 7: try { try decoder.decodeSingularUInt32Field(value: &_storage._iaq) }()
        case 8: try { try decoder.decodeSingularFloatField(value: &_storage._distance) }()
        case 9: try { try decoder.decodeSingularFloatField(value: &_storage._lux) }()
        case 10: try { try decoder.decodeSingularFloatField(value: &_storage._whiteLux) }()
        case 11: try { try decoder.decodeSingularFloatField(value: &_storage._irLux) }()
        case 12: try { try decoder.decodeSingularFloatField(value: &_storage._uvLux) }()
        case 13: try { try decoder.decodeSingularUInt32Field(value: &_storage._windDirection) }()
        case 14: try { try decoder.decodeSingularFloatField(value: &_storage._windSpeed) }()
        case 15: try { try decoder.decodeSingularFloatField(value: &_storage._weight) }()
        case 16: try { try decoder.decodeSingularFloatField(value: &_storage._windGust) }()
        case 17: try { try decoder.decodeSingularFloatField(value: &_storage._windLull) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._temperature.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._temperature, fieldNumber: 1)
      }
      if _storage._relativeHumidity.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._relativeHumidity, fieldNumber: 2)
      }
      if _storage._barometricPressure.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._barometricPressure, fieldNumber: 3)
      }
      if _storage._gasResistance.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._gasResistance, fieldNumber: 4)
      }
      if _storage._voltage.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._voltage, fieldNumber: 5)
      }
      if _storage._current.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._current, fieldNumber: 6)
      }
      if _storage._iaq != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._iaq, fieldNumber: 7)
      }
      if _storage._distance.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._distance, fieldNumber: 8)
      }
      if _storage._lux.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._lux, fieldNumber: 9)
      }
      if _storage._whiteLux.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._whiteLux, fieldNumber: 10)
      }
      if _storage._irLux.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._irLux, fieldNumber: 11)
      }
      if _storage._uvLux.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._uvLux, fieldNumber: 12)
      }
      if _storage._windDirection != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._windDirection, fieldNumber: 13)
      }
      if _storage._windSpeed.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._windSpeed, fieldNumber: 14)
      }
      if _storage._weight.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._weight, fieldNumber: 15)
      }
      if _storage._windGust.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._windGust, fieldNumber: 16)
      }
      if _storage._windLull.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._windLull, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: EnvironmentMetrics, rhs: EnvironmentMetrics) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._temperature != rhs_storage._temperature {return false}
        if _storage._relativeHumidity != rhs_storage._relativeHumidity {return false}
        if _storage._barometricPressure != rhs_storage._barometricPressure {return false}
        if _storage._gasResistance != rhs_storage._gasResistance {return false}
        if _storage._voltage != rhs_storage._voltage {return false}
        if _storage._current != rhs_storage._current {return false}
        if _storage._iaq != rhs_storage._iaq {return false}
        if _storage._distance != rhs_storage._distance {return false}
        if _storage._lux != rhs_storage._lux {return false}
        if _storage._whiteLux != rhs_storage._whiteLux {return false}
        if _storage._irLux != rhs_storage._irLux {return false}
        if _storage._uvLux != rhs_storage._uvLux {return false}
        if _storage._windDirection != rhs_storage._windDirection {return false}
        if _storage._windSpeed != rhs_storage._windSpeed {return false}
        if _storage._weight != rhs_storage._weight {return false}
        if _storage._windGust != rhs_storage._windGust {return false}
        if _storage._windLull != rhs_storage._windLull {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PowerMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PowerMetrics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ch1_voltage"),
    2: .standard(proto: "ch1_current"),
    3: .standard(proto: "ch2_voltage"),
    4: .standard(proto: "ch2_current"),
    5: .standard(proto: "ch3_voltage"),
    6: .standard(proto: "ch3_current"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.ch1Voltage) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.ch1Current) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.ch2Voltage) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.ch2Current) }()
      case 5: try { try decoder.decodeSingularFloatField(value: &self.ch3Voltage) }()
      case 6: try { try decoder.decodeSingularFloatField(value: &self.ch3Current) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.ch1Voltage.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.ch1Voltage, fieldNumber: 1)
    }
    if self.ch1Current.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.ch1Current, fieldNumber: 2)
    }
    if self.ch2Voltage.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.ch2Voltage, fieldNumber: 3)
    }
    if self.ch2Current.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.ch2Current, fieldNumber: 4)
    }
    if self.ch3Voltage.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.ch3Voltage, fieldNumber: 5)
    }
    if self.ch3Current.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.ch3Current, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PowerMetrics, rhs: PowerMetrics) -> Bool {
    if lhs.ch1Voltage != rhs.ch1Voltage {return false}
    if lhs.ch1Current != rhs.ch1Current {return false}
    if lhs.ch2Voltage != rhs.ch2Voltage {return false}
    if lhs.ch2Current != rhs.ch2Current {return false}
    if lhs.ch3Voltage != rhs.ch3Voltage {return false}
    if lhs.ch3Current != rhs.ch3Current {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AirQualityMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AirQualityMetrics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pm10_standard"),
    2: .standard(proto: "pm25_standard"),
    3: .standard(proto: "pm100_standard"),
    4: .standard(proto: "pm10_environmental"),
    5: .standard(proto: "pm25_environmental"),
    6: .standard(proto: "pm100_environmental"),
    7: .standard(proto: "particles_03um"),
    8: .standard(proto: "particles_05um"),
    9: .standard(proto: "particles_10um"),
    10: .standard(proto: "particles_25um"),
    11: .standard(proto: "particles_50um"),
    12: .standard(proto: "particles_100um"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.pm10Standard) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.pm25Standard) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.pm100Standard) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.pm10Environmental) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.pm25Environmental) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.pm100Environmental) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.particles03Um) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self.particles05Um) }()
      case 9: try { try decoder.decodeSingularUInt32Field(value: &self.particles10Um) }()
      case 10: try { try decoder.decodeSingularUInt32Field(value: &self.particles25Um) }()
      case 11: try { try decoder.decodeSingularUInt32Field(value: &self.particles50Um) }()
      case 12: try { try decoder.decodeSingularUInt32Field(value: &self.particles100Um) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.pm10Standard != 0 {
      try visitor.visitSingularUInt32Field(value: self.pm10Standard, fieldNumber: 1)
    }
    if self.pm25Standard != 0 {
      try visitor.visitSingularUInt32Field(value: self.pm25Standard, fieldNumber: 2)
    }
    if self.pm100Standard != 0 {
      try visitor.visitSingularUInt32Field(value: self.pm100Standard, fieldNumber: 3)
    }
    if self.pm10Environmental != 0 {
      try visitor.visitSingularUInt32Field(value: self.pm10Environmental, fieldNumber: 4)
    }
    if self.pm25Environmental != 0 {
      try visitor.visitSingularUInt32Field(value: self.pm25Environmental, fieldNumber: 5)
    }
    if self.pm100Environmental != 0 {
      try visitor.visitSingularUInt32Field(value: self.pm100Environmental, fieldNumber: 6)
    }
    if self.particles03Um != 0 {
      try visitor.visitSingularUInt32Field(value: self.particles03Um, fieldNumber: 7)
    }
    if self.particles05Um != 0 {
      try visitor.visitSingularUInt32Field(value: self.particles05Um, fieldNumber: 8)
    }
    if self.particles10Um != 0 {
      try visitor.visitSingularUInt32Field(value: self.particles10Um, fieldNumber: 9)
    }
    if self.particles25Um != 0 {
      try visitor.visitSingularUInt32Field(value: self.particles25Um, fieldNumber: 10)
    }
    if self.particles50Um != 0 {
      try visitor.visitSingularUInt32Field(value: self.particles50Um, fieldNumber: 11)
    }
    if self.particles100Um != 0 {
      try visitor.visitSingularUInt32Field(value: self.particles100Um, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: AirQualityMetrics, rhs: AirQualityMetrics) -> Bool {
    if lhs.pm10Standard != rhs.pm10Standard {return false}
    if lhs.pm25Standard != rhs.pm25Standard {return false}
    if lhs.pm100Standard != rhs.pm100Standard {return false}
    if lhs.pm10Environmental != rhs.pm10Environmental {return false}
    if lhs.pm25Environmental != rhs.pm25Environmental {return false}
    if lhs.pm100Environmental != rhs.pm100Environmental {return false}
    if lhs.particles03Um != rhs.particles03Um {return false}
    if lhs.particles05Um != rhs.particles05Um {return false}
    if lhs.particles10Um != rhs.particles10Um {return false}
    if lhs.particles25Um != rhs.particles25Um {return false}
    if lhs.particles50Um != rhs.particles50Um {return false}
    if lhs.particles100Um != rhs.particles100Um {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Telemetry"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "time"),
    2: .standard(proto: "device_metrics"),
    3: .standard(proto: "environment_metrics"),
    4: .standard(proto: "air_quality_metrics"),
    5: .standard(proto: "power_metrics"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self.time) }()
      case 2: try {
        var v: DeviceMetrics?
        var hadOneofValue = false
        if let current = self.variant {
          hadOneofValue = true
          if case .deviceMetrics(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.variant = .deviceMetrics(v)
        }
      }()
      case 3: try {
        var v: EnvironmentMetrics?
        var hadOneofValue = false
        if let current = self.variant {
          hadOneofValue = true
          if case .environmentMetrics(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.variant = .environmentMetrics(v)
        }
      }()
      case 4: try {
        var v: AirQualityMetrics?
        var hadOneofValue = false
        if let current = self.variant {
          hadOneofValue = true
          if case .airQualityMetrics(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.variant = .airQualityMetrics(v)
        }
      }()
      case 5: try {
        var v: PowerMetrics?
        var hadOneofValue = false
        if let current = self.variant {
          hadOneofValue = true
          if case .powerMetrics(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.variant = .powerMetrics(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.time != 0 {
      try visitor.visitSingularFixed32Field(value: self.time, fieldNumber: 1)
    }
    switch self.variant {
    case .deviceMetrics?: try {
      guard case .deviceMetrics(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .environmentMetrics?: try {
      guard case .environmentMetrics(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .airQualityMetrics?: try {
      guard case .airQualityMetrics(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .powerMetrics?: try {
      guard case .powerMetrics(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Telemetry, rhs: Telemetry) -> Bool {
    if lhs.time != rhs.time {return false}
    if lhs.variant != rhs.variant {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nau7802Config: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Nau7802Config"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "zeroOffset"),
    2: .same(proto: "calibrationFactor"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.zeroOffset) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.calibrationFactor) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.zeroOffset != 0 {
      try visitor.visitSingularInt32Field(value: self.zeroOffset, fieldNumber: 1)
    }
    if self.calibrationFactor.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.calibrationFactor, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Nau7802Config, rhs: Nau7802Config) -> Bool {
    if lhs.zeroOffset != rhs.zeroOffset {return false}
    if lhs.calibrationFactor != rhs.calibrationFactor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
